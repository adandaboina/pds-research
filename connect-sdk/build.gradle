apply plugin: 'com.android.library'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'signing'
jacoco {
    toolVersion = '0.8.6' //Use latest version
}
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReport(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"
    reports {
        xml.enabled = true
        html.enabled = true
        csv.enabled = true
    }
    def fileFilter = ['**/R.class',
                      '**/R$*.class', '**/*$InjectAdapter.*',
                      '**/*$ModuleAdapter.*',
                      '**/Dao*.*',
                      '**/*$ViewInjector*.*',
                      '**/*$ViewBinder*.*',
                      '**/*MembersInjector*.*',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*$Lambda$*.',
                      '**/*Factory*.',
                      '**/*$Builder*',
                      '**/*$Parcelable*.*',
                      '**/*DaggerApplicationComponent*.*',
                      '**/api',
                      '**/android/**/*.*',
                      '**/me/**/*.*', '**/org/**/*.*', '**/org/**/*.*']

    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug/classes/", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java/"
    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: project.projectDir, includes:
            ['**/**/*.exec', '**/**/*.ec'])
}

//apply from: "$project.rootDir/sonar.gradle"

android {
    compileSdkVersion 31
    buildToolsVersion "29.0.2"

    File secretPropsFile = project.rootProject.file('local.properties')
    Properties properties = new Properties()
    if (secretPropsFile.exists()) {
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
    }


    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 108
        versionName "3.0.3"

        if (!properties.isEmpty()) {
            resValue "string", "partnerId", properties.getProperty("PARTNER_ID", "")
            resValue "string", "partnerSecret", properties.getProperty("PARTNER_SECRET", "")
            resValue "string", "finicityAppKey", properties.getProperty("FINICITY_APP_KEY", "")
        } else {
            resValue "string", "partnerId", System.getenv("PARTNER_ID")
            resValue "string", "partnerSecret", System.getenv("PARTNER_SECRET")
            resValue "string", "finicityAppKey", System.getenv("FINICITY_APP_KEY")
        }


        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        consumerProguardFiles 'consumer-rules.pro'

        multiDexEnabled true

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    testOptions {
        animationsDisabled true
        unitTests {
            includeAndroidResources = true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        pickFirst  'META-INF/**'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.browser:browser:1.0.0'
    implementation 'androidx.test:monitor:1.5.0'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-inline:3.4.0'
    testImplementation 'org.robolectric:robolectric:4.3'
    implementation 'com.android.volley:volley:1.2.0'
    implementation 'com.google.code.gson:gson:2.10.1'

    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.4.0'

    implementation('financial.atomic:transact:3.3.2') {
        exclude group: 'com.google.android.material'
    }
    implementation 'com.google.android.material:material:1.6.0'
    androidTestImplementation project(path: ':connect-sdk')
}

ext {
    PUBLISH_GROUP_ID = 'com.mastercard.openbanking.connect'
    PUBLISH_VERSION = '3.0.3'
    PUBLISH_ARTIFACT_ID = 'connect-sdk'
}

publishing {
    publications {
        release(MavenPublication) {

            from components.findByName('release')
            groupId = 'com.github.adandaboina'
            artifactId = 'pds-research'
            version = '0.0.2'

            pom {
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    // Add our dependencies to POM file so that when our library is downloaded its dependencies are also downloaded.
                    // This is why we only support integration via repository because we now depend on CustomTabs library for OAuth support.
                    // If we distribute by zip file then dependency on CustomTabs would not automatically occur and developers would see issues with OAuth.
                    project.configurations.implementation.allDependencies.each {
                        if (it.name != 'unspecified') {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }

                }
            }

//            afterEvaluate {
//                from components.findByName('release')
//            }
        }
    }
}

//apply from: "${rootProject.projectDir}/sonatype-publish.gradle"


